// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addFeedToView = `-- name: AddFeedToView :exec
INSERT INTO
    view_items (view_id, feed_id)
VALUES
    (?, ?)
`

type AddFeedToViewParams struct {
	ViewID int64 `json:"view_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) AddFeedToView(ctx context.Context, arg AddFeedToViewParams) error {
	_, err := q.db.ExecContext(ctx, addFeedToView, arg.ViewID, arg.FeedID)
	return err
}

const createFeed = `-- name: CreateFeed :execresult
INSERT INTO
    rss_feeds (title, url, reference_count)
VALUES
    (?, ?, 1) ON DUPLICATE KEY
UPDATE reference_count = reference_count + 1
`

type CreateFeedParams struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFeed, arg.Title, arg.Url)
}

const createFeedItem = `-- name: CreateFeedItem :exec
INSERT IGNORE INTO rss_feed_items (rss_feed_id, title, url, published_at)
VALUES
    (?, ?, ?, ?)
`

type CreateFeedItemParams struct {
	RssFeedID   int64     `json:"rss_feed_id"`
	Title       string    `json:"title"`
	Url         string    `json:"url"`
	PublishedAt time.Time `json:"published_at"`
}

func (q *Queries) CreateFeedItem(ctx context.Context, arg CreateFeedItemParams) error {
	_, err := q.db.ExecContext(ctx, createFeedItem,
		arg.RssFeedID,
		arg.Title,
		arg.Url,
		arg.PublishedAt,
	)
	return err
}

const createSession = `-- name: CreateSession :execresult
INSERT INTO
    sessions (user_id, token, expires_at)
VALUES
    (?, ?, ?)
`

type CreateSessionParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO
    users (email, password)
VALUES
    (?, ?)
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
}

const createUserView = `-- name: CreateUserView :exec
INSERT INTO
    user_views (user_id, view_id)
VALUES
    (?, ?)
`

type CreateUserViewParams struct {
	UserID int64 `json:"user_id"`
	ViewID int64 `json:"view_id"`
}

func (q *Queries) CreateUserView(ctx context.Context, arg CreateUserViewParams) error {
	_, err := q.db.ExecContext(ctx, createUserView, arg.UserID, arg.ViewID)
	return err
}

const createView = `-- name: CreateView :execresult
INSERT INTO
    views (name, public, slug)
VALUES
    (?, ?, ?)
`

type CreateViewParams struct {
	Name   string `json:"name"`
	Public bool   `json:"public"`
	Slug   string `json:"slug"`
}

func (q *Queries) CreateView(ctx context.Context, arg CreateViewParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createView, arg.Name, arg.Public, arg.Slug)
}

const decrementFeedRefCount = `-- name: DecrementFeedRefCount :exec
UPDATE rss_feeds
SET
    reference_count = reference_count - 1
WHERE
    id = ?
`

func (q *Queries) DecrementFeedRefCount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, decrementFeedRefCount, id)
	return err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM rss_feeds
WHERE
    id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE
    id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteView = `-- name: DeleteView :exec
DELETE v,
vi,
uv
FROM
    views v
    LEFT JOIN view_items vi ON v.id = vi.view_id
    LEFT JOIN user_views uv ON v.id = uv.view_id
WHERE
    v.id = ?
`

func (q *Queries) DeleteView(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteView, id)
	return err
}

const gCSessions = `-- name: GCSessions :exec
DELETE FROM sessions
WHERE
    expires_at < NOW()
`

func (q *Queries) GCSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, gCSessions)
	return err
}

const getAllViews = `-- name: GetAllViews :many
SELECT
    id, name, public, slug, created_at, updated_at
FROM
    views
ORDER BY
    created_at DESC
`

func (q *Queries) GetAllViews(ctx context.Context) ([]View, error) {
	rows, err := q.db.QueryContext(ctx, getAllViews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []View
	for rows.Next() {
		var i View
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Public,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT
    id, title, url, reference_count, created_at, updated_at
FROM
    rss_feeds
WHERE
    url = ?
LIMIT
    1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (RssFeed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i RssFeed
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.ReferenceCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedRefCount = `-- name: GetFeedRefCount :one
SELECT
    reference_count
FROM
    rss_feeds
WHERE
    id = ?
`

func (q *Queries) GetFeedRefCount(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFeedRefCount, id)
	var reference_count int64
	err := row.Scan(&reference_count)
	return reference_count, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT
    id, title, url, reference_count, created_at, updated_at
FROM
    rss_feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]RssFeed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeed
	for rows.Next() {
		var i RssFeed
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.ReferenceCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsUpdatable = `-- name: GetFeedsUpdatable :many
SELECT
    id, title, url, reference_count, created_at, updated_at
FROM
    rss_feeds
WHERE
    updated_at < NOW() - 300
`

func (q *Queries) GetFeedsUpdatable(ctx context.Context) ([]RssFeed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsUpdatable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeed
	for rows.Next() {
		var i RssFeed
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.ReferenceCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestFeedItems = `-- name: GetLatestFeedItems :many
SELECT
    id, rss_feed_id, title, url, published_at, added_at
FROM
    rss_feed_items
WHERE
    rss_feed_id = ?
ORDER BY
    published_at DESC
LIMIT
    30
`

func (q *Queries) GetLatestFeedItems(ctx context.Context, rssFeedID int64) ([]RssFeedItem, error) {
	rows, err := q.db.QueryContext(ctx, getLatestFeedItems, rssFeedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeedItem
	for rows.Next() {
		var i RssFeedItem
		if err := rows.Scan(
			&i.ID,
			&i.RssFeedID,
			&i.Title,
			&i.Url,
			&i.PublishedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT
    id, user_id, token, expires_at, created_at, updated_at
FROM
    sessions
WHERE
    token = ?
    AND expires_at > NOW()
LIMIT
    1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, email, password, created_at, updated_at
FROM
    users
WHERE
    email = ?
LIMIT
    1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserViews = `-- name: GetUserViews :many
SELECT
    views.id, views.name, views.public, views.slug, views.created_at, views.updated_at
FROM
    views
    JOIN user_views ON views.id = user_views.view_id
WHERE
    user_views.user_id = ?
`

func (q *Queries) GetUserViews(ctx context.Context, userID int64) ([]View, error) {
	rows, err := q.db.QueryContext(ctx, getUserViews, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []View
	for rows.Next() {
		var i View
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Public,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getViewBySlug = `-- name: GetViewBySlug :one
SELECT
    id, name, public, slug, created_at, updated_at
FROM
    views
WHERE
    slug = ?
LIMIT
    1
`

func (q *Queries) GetViewBySlug(ctx context.Context, slug string) (View, error) {
	row := q.db.QueryRowContext(ctx, getViewBySlug, slug)
	var i View
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Public,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getViewFeeds = `-- name: GetViewFeeds :many
SELECT
    rss_feeds.id, rss_feeds.title, rss_feeds.url, rss_feeds.reference_count, rss_feeds.created_at, rss_feeds.updated_at
FROM
    rss_feeds
    LEFT JOIN view_items ON rss_feeds.id = view_items.feed_id
WHERE
    view_items.view_id = ?
`

func (q *Queries) GetViewFeeds(ctx context.Context, viewID int64) ([]RssFeed, error) {
	rows, err := q.db.QueryContext(ctx, getViewFeeds, viewID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeed
	for rows.Next() {
		var i RssFeed
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.ReferenceCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getViewFeedsItems = `-- name: GetViewFeedsItems :many
SELECT
    rss_feed_items.id, rss_feed_items.rss_feed_id, rss_feed_items.title, rss_feed_items.url, rss_feed_items.published_at, rss_feed_items.added_at
FROM
    rss_feed_items
    LEFT JOIN view_items ON rss_feed_items.rss_feed_id = view_items.feed_id
WHERE
    view_items.view_id = ?
ORDER BY
    rss_feed_items.published_at DESC
LIMIT
    ?
`

type GetViewFeedsItemsParams struct {
	ViewID int64 `json:"view_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetViewFeedsItems(ctx context.Context, arg GetViewFeedsItemsParams) ([]RssFeedItem, error) {
	rows, err := q.db.QueryContext(ctx, getViewFeedsItems, arg.ViewID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeedItem
	for rows.Next() {
		var i RssFeedItem
		if err := rows.Scan(
			&i.ID,
			&i.RssFeedID,
			&i.Title,
			&i.Url,
			&i.PublishedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markUpdated = `-- name: MarkUpdated :exec
UPDATE rss_feeds
SET
    updated_at = NOW()
WHERE
    id = ?
`

func (q *Queries) MarkUpdated(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markUpdated, id)
	return err
}

const removeFeedFromView = `-- name: RemoveFeedFromView :exec
DELETE FROM view_items
WHERE
    view_id = ?
    AND feed_id = ?
`

type RemoveFeedFromViewParams struct {
	ViewID int64 `json:"view_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) RemoveFeedFromView(ctx context.Context, arg RemoveFeedFromViewParams) error {
	_, err := q.db.ExecContext(ctx, removeFeedFromView, arg.ViewID, arg.FeedID)
	return err
}
